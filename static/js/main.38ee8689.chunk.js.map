{"version":3,"sources":["components/Button.js","containers/CounterComponent.js","actions/index.js","reducers/CounterReducer.js","reducers/index.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","action","buttonTitle","getRandomColor","color","i","Math","floor","random","CounterComponent","state","value","handleBtnActionIncrement","setState","onIncrementClick","count","handleBtnActionDecrement","onDecrementClick","handleReset","onResetClick","handleAdd","onAddCount","handleChange","e","target","this","style","className","type","onChange","Component","connect","counter","dispatch","incrementCount","decrementCount","val","addCount","initialState","CounterReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","logger","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38ee8689.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div>\r\n      <button onClick={props.action}>{props.buttonTitle}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../components/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  incrementCount,\r\n  decrementCount,\r\n  resetCount,\r\n  addCount,\r\n} from \"../actions/index\";\r\n\r\nfunction getRandomColor() {\r\n  let letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nclass CounterComponent extends Component {\r\n  state = {\r\n    value: 0,\r\n    color: \"#0d3b66\",\r\n  };\r\n  handleBtnActionIncrement = () => {\r\n    this.setState({ color: getRandomColor() });\r\n    this.props.onIncrementClick(this.props.count);\r\n  };\r\n\r\n  handleBtnActionDecrement = () => {\r\n    this.setState({ color: getRandomColor() });\r\n    this.props.onDecrementClick(this.props.count);\r\n  };\r\n  handleReset = () => {\r\n    this.setState({ color: \"#0d3b66\" });\r\n    this.props.onResetClick();\r\n  };\r\n  handleAdd = () => {\r\n    this.setState({ color: getRandomColor() });\r\n    this.props.onAddCount(this.props.count, this.state.value);\r\n    this.setState({\r\n      value: 0,\r\n    });\r\n  };\r\n  handleChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { count } = this.props;\r\n    return (\r\n      <div>\r\n        <h1 style={{ color: this.state.color }}>Count: {count}</h1>\r\n        <div className=\"input\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.value}\r\n          />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <Button action={this.handleBtnActionIncrement} buttonTitle=\"+\" />\r\n          <Button action={this.handleBtnActionDecrement} buttonTitle=\"-\" />\r\n          <Button action={this.handleAdd} buttonTitle=\"add\" />\r\n          <Button action={this.handleReset} buttonTitle=\"reset\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    count: state.counter.count,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onIncrementClick: (count) => {\r\n      dispatch(incrementCount(count));\r\n    },\r\n    onDecrementClick: (count) => {\r\n      dispatch(decrementCount(count));\r\n    },\r\n    onResetClick: () => {\r\n      dispatch(resetCount());\r\n    },\r\n    onAddCount: (count, val) => {\r\n      dispatch(addCount(count, val));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterComponent);\r\n","export const incrementCount = (count) => {\r\n  const num = count + 1;\r\n  return {\r\n    type: \"INCREMENT_COUNT\",\r\n    count: num,\r\n  };\r\n};\r\n\r\nexport const decrementCount = (count) => {\r\n  const num = count - 1;\r\n  return {\r\n    type: \"DECREMENT_COUNT\",\r\n    count: num,\r\n  };\r\n};\r\n\r\nexport const resetCount = () => {\r\n  const num = 0;\r\n  return {\r\n    type: \"RESET_COUNT\",\r\n    count: num,\r\n  };\r\n};\r\n\r\nexport const addCount = (count, val) => {\r\n  let num;\r\n  if (count === 0) {\r\n    num = val;\r\n  } else num = +count + +val;\r\n  return {\r\n    type: \"ADD_COUNT\",\r\n    count: num,\r\n  };\r\n};\r\n","const initialState = {\r\n  count: 0,\r\n};\r\n\r\nfunction CounterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"INCREMENT_COUNT\": {\r\n      return { ...state, ...action };\r\n    }\r\n    case \"DECREMENT_COUNT\": {\r\n      return { ...state, ...action };\r\n    }\r\n    case \"RESET_COUNT\": {\r\n      return { ...state, ...action };\r\n    }\r\n    case \"ADD_COUNT\": {\r\n      return { ...state, ...action };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default CounterReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport CounterReducer from \"../reducers/CounterReducer\";\r\n\r\nexport default combineReducers({\r\n  counter: CounterReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nexport default store;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport CounterComponent from \"./containers/CounterComponent\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <CounterComponent />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}